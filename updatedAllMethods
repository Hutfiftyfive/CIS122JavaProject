import java.util.HashMap;
import java.util.Scanner;
/*------------------------------------------------------------------------------------------------------*/
public class scratch {
	
/*------------------------------------------------------------------------------------------------------*/	
/*------------------------------------------------------------------------------------------------------*/	
//Start of Alejandro Castillo Code	
	//This method get information from user to determine how much water is needed in that day
	public static String getHydration(double avgMass, double massBefore,double massAfter,double hours) {
		//drink oz in mass
		
		double workoutloss = hours * 12;
		double loss = massBefore - massAfter; //weight before and after work-out
		double waterFromLoss = (loss/.5)*8; //amount lost but for every .5 drink 8oz of water
		double water = (avgMass - (avgMass*.2) + workoutloss + waterFromLoss);// 
		
		return (""+ water); //gives in oz how much water should be drunk remember to add in HTML " you need to drink:"
	}
  
/*------------------------------------------------------------------------------------------------------*/	
	//method determines if food is heathy depending on fat percent
	
  public static String getFood( double cal,double fat) {
		double 
		fatPercent = ((9 * fat) / (float)(cal)) * 100;  //calculates calorie to fat percentage
		if (fatPercent <= 30)
		       return " is Heart Healthy!";  //returns string if fatpercent is below 30 
		 
		    else
		       return " is NOT Heart Healthy!";  //returns String if fatpercent if above 30
		 
	}
  
 /*------------------------------------------------------------------------------------------------------*/  
  //This method gets user input to calculate BMR is later used to get calories needed 
  public static double getBMR(String gender, double height, int age,double weight) {
		double BMR;
		
		if (gender == "male")
        {
            BMR = (int) (66 + (6.23 * weight) + (12.7 * height) - (6.8 * age)); //this is the how to obtain BMR if male
            return BMR;
        }
        else
        {
            BMR = (int) (665 + (4.35 * weight) + (4.7 * height) - (4.7 * age)); //else statement for when female BMR is needed to be calculated
            return BMR;
        }
	}
	
 /*------------------------------------------------------------------------------------------------------*/
  //Lets user know how many calories are need to maintain curren body weight depending on many paramaters 
  //including gender and level of excercise	
	public static double getCal(int E,String gender, double height, int age,double weight) {
		
/*Enter level of excercise: 
(1)-None 
(2)-light 
(3)-moderately 						This should be included in the HTML or user to understand
(4)-intensely 
(5)-extreme */  
		
		double B = getBMR(gender, height, age,weight); //Parameters needed for BMR uses method above  
		if(E == 1)			  //E is excercise 
			return (B * 1.2); //returns BMR multiplied by Excercise enterd
		else if (E==2)
			return(B * 1.375);
	    else if(E==3)
	    	return(B * 1.55);
	    else if(E==4)
	    	return(B * 1.725);
	    else
	    	return(B * 1.9);
			
			
	
}

/*------------------------------------------------------------------------------------------------------*/
	//Uses a astandard formula to get BMI for user 
public static double getBMI(double weight, double feet, double inches) {
		double weightInKilos = weight * 0.453592; //pounds entered converted to kilos
        double heightInMeters = (((feet * 12) + inches) * .0254); //converts the feet and inches entered into meters which is what is used for BMI
        double BMI = weightInKilos / (heightInMeters * heightInMeters);  //uses BMI calculation
		
		return BMI;
}

/*------------------------------------------------------------------------------------------------------*/
	//This method interprets the BMI the user got prior
	public static String interpretBMI(double BMI) {         //This method uses the BMI calculated with getBMI 
		if (BMI < 18.5 ) {									//to interpret the data into a String 
            return "Underweight";							//will show in box
        }

        else if (BMI >= 18.5 && BMI < 25) {
            return "Normal";
        }

        else if (BMI >= 25 && BMI < 30) {
            return "Overweight";
        }

        else  {
            return "Obese";
        }
	}
//------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------

 public static String recursion(String food) //recursion method
	    {
	        String temp, group;
	        Scanner input = new Scanner(System.in); //implementation of scanner

	        //HASH MAP DONE BY EDWARD DOMINQUEZ
	        // Start of his code -------------------------------------------------------------------------------------------
	        HashMap<String, Integer> fruitCalorieMap = new HashMap<String, Integer>();

	        fruitCalorieMap.put("apple", 95);
	        fruitCalorieMap.put("banana", 100);
	        fruitCalorieMap.put("clementine", 35);
	        fruitCalorieMap.put("mango", 202);
	        fruitCalorieMap.put("peach", 59);
	        fruitCalorieMap.put("orange", 62);
	        fruitCalorieMap.put("passion fruit", 17);
	        fruitCalorieMap.put("pear", 101);
	        fruitCalorieMap.put("blueberries", 84);

	        //vegetable calorie map
	        HashMap<String, Integer> vegetableCalorieMap = new HashMap<String, Integer>();

	        vegetableCalorieMap.put("broccoli", 50);
	        vegetableCalorieMap.put("carrot", 41);
	        vegetableCalorieMap.put("cucumber", 50);
	        vegetableCalorieMap.put("cauliflower", 146);
	        vegetableCalorieMap.put("cherry tomato", 20);
	        vegetableCalorieMap.put("green beans", 31);
	        vegetableCalorieMap.put("zucchini", 33);


	        //meat and protein substitute calorie map
	            HashMap<String, Integer> meatCalorieMap = new HashMap<String, Integer>();
	            meatCalorieMap.put("chicken breast", 200);
	            meatCalorieMap.put("pork chop", 257);
	            meatCalorieMap.put("ground beef patty", 172);

	            //END OF EDWARDS CODE-------------------------------------------------------------------------------------

	            if (!food.equalsIgnoreCase("done")){ //checks if the user wants to add more food or not

	           //*System.out.println("What food group are you looking for? Meat, Vegetable, Fruit"); //text prompt
	            //System.out.print("Or if you are done type Done: ");*/ 
	            group = null;    //change to next line when String implementation is implemented*/
	            	


	            //recursion part for meat
	            if (group.equalsIgnoreCase("Meat")){//if statement for food group
	                
	            	
	            	/*System.out.print("What food did you eat? "); //user prompt for next step
	                food = input.nextLine();  */
	            	
	            	
	            	// uses scanner input for getting the food
	                if (meatCalorieMap.containsKey(food.toLowerCase())){  // checks if hashmap contains the food the user input
	                    num += meatCalorieMap.get(food.toLowerCase());  //adds up the calorie amount
	                }
	                else
	                {
	                    
	                	
	                /*	System.out.println("Im sorry we don't have that food in our database. "); //text prompt   */
	                return "Food not avaialable. ";
	                
	                }
	                recursion(food);           //recalls the method
	            } //recursion part for vegetables
	            else if (group.equalsIgnoreCase("Vegetable")){
	                //System.out.print("What food did you eat? ");
	                food =       //Make food equal to html tag
	                if (vegetableCalorieMap.containsKey(food)){
	                    num += vegetableCalorieMap.get(food.toLowerCase());
	                }
	                else
	                {
	                    
	                	
	                /*	System.out.println("Im sorry we don't have that food in our database. "); */
	                return "Food not in database";
	                
	                }
	                recursion(food);
	            }//recursion part for fruit
	            else if (group.equalsIgnoreCase("Fruit")){
	              //  System.out.print("What food did you eat? ");
	                food =         //Tag on html
	                if (fruitCalorieMap.containsKey(food)){
	                    num += fruitCalorieMap.get(food.toLowerCase());
	                }
	                else
	                {
	                   
	                	
	                /*	System.out.println("Im sorry we don't have that food in our database. ");*/
	                
	                
	                }
	                recursion(food);
	            }
	            else if (!group.equalsIgnoreCase("done"))
	            {
	                //System.out.println("You have entered an incorrect food group, try again."); //text prompt
	                recursion(food);            //recalls the recursion method
	            }
	        }
	        System.out.print("Total calorie amount is: "); //text prompt
	        return num + ""; //returns the final value
	    

	   /* public static void main(String[] args) {
	        String temp = "temp"; //variable used for method call

	        System.out.println(recursion(temp) + "  calories"); //initial call of the method and prints out result
	    }*/
/*------------------------------------------------------------------------------------------------------*/
	    
	        public static String search( String group, String food) //takes in two variables and returns nothings
	        {
	            int num =   ;
	            //START OF EDWARDS CODE---------------------------------------------------------------------------------------
	                    //fruit calorie map
	                    HashMap<String, Integer> fruitCalorieMap = new HashMap<String, Integer>();

	                    fruitCalorieMap.put("apple", 95);
	                    fruitCalorieMap.put("banana", 100);
	                    fruitCalorieMap.put("clementine", 35);
	                    fruitCalorieMap.put("mango", 202);
	                    fruitCalorieMap.put("peach", 59);
	                    fruitCalorieMap.put("orange", 62);
	                    fruitCalorieMap.put("passion Fruit", 17);
	                    fruitCalorieMap.put("pear", 101);
	                    fruitCalorieMap.put("blueberries", 84);

	                    //vegetable calorie map
	                    HashMap<String, Integer> vegetableCalorieMap = new HashMap<String, Integer>();

	                    vegetableCalorieMap.put("broccoli",50);
	                    vegetableCalorieMap.put("carrot", 41);
	                    vegetableCalorieMap.put("cucumber",50);
	                    vegetableCalorieMap.put("cauliflower",146);
	                    vegetableCalorieMap.put("cherry tomato",20);
	                    vegetableCalorieMap.put("green beans",31);
	                    vegetableCalorieMap.put("zucchini",33);


	                    //meat and protein substitute calorie map

	                    HashMap<String, Integer> meatCalorieMap = new HashMap<String, Integer>();
	                    meatCalorieMap.put("chicken breast", 200);
	                    meatCalorieMap.put("pork chop", 257);
	                    meatCalorieMap.put("ground beef patty", 172);
	    //END OF EDWARDS CODE ------------------------------------------------------------------------------------

	                    if (group.equalsIgnoreCase("meat")) //checks for what food group the user selected
	                    {
	                        if (meatCalorieMap.containsKey(food.toLowerCase())) //checks if we have the food the user input in our database
	                        num = meatCalorieMap.get(food.toLowerCase());       //sets calorie value equal to num
	                        else
	                        {
	                            System.out.println("Sorry we don't have that food in our database"); //text prompt
	                        }
	                    }
	                    else if (group.equalsIgnoreCase("vegetable"))
	                    {
	                        if (vegetableCalorieMap.containsKey(food.toLowerCase()))
	                           num = vegetableCalorieMap.get(food.toLowerCase());
	                        else
	                        {
	                            System.out.println("Sorry we don't have that food in our database");
	                        }
	                    }
	                    else if (group.equalsIgnoreCase("fruit"))
	                    {
	                        if (fruitCalorieMap.containsKey(food.toLowerCase()))
	                          num =  fruitCalorieMap.get(food.toLowerCase());
	                        else
	                        {
	                            //System.out.println("Sorry we don't have that food in our database");
	                        }
	                    }

	            if (num != 0) //checks if num has a valid input
	            {
	                return (food + " has " + num + " calories in it."); //text prompt
	            }
	        }
	    }
	        
	      
